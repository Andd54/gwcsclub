I"90<h3 id="描述">描述</h3>
<p>农场主有n个农场，每个农场有一只H牛或一只G牛，农场中间有n-1条路连接。农场主有m个朋友来拜访，每个朋友有自己偏好的奶牛（H或G的一种）。给出n，m，每个农场中的牛的种类，每两个相邻的农场，每个来拜访的朋友的拜访起点农场和终点农场和他偏好的奶牛，问能让哪些朋友来到自己偏好奶牛的农场？（来到了输出1，否则输出0）。</p>

<h3 id="思路">思路</h3>
<p>ufds，将每两个能由一条路相连且奶牛种类相同的农场记为相连，没有直接的路相连或奶牛种类不同的农场记为不相连。当给出起点农场和终点农场时，判断这两个农场是否相连，若不相连返回1，若相连，判断这两个相连的农场的奶牛种类是否和朋友的偏好相同，若相同返回1，否则返回0。</p>

<h3 id="复杂度">复杂度</h3>

<p>$O(n+m)$</p>

<h3 id="实现">实现</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">milkVisits</span><span class="o">{</span>
  
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">connect</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span><span class="kt">int</span> <span class="n">b</span><span class="o">){</span>
    <span class="k">if</span><span class="o">(</span><span class="n">isH</span><span class="o">[</span><span class="n">a</span><span class="o">]==</span><span class="n">isH</span><span class="o">[</span><span class="n">b</span><span class="o">]){</span>
      <span class="k">if</span><span class="o">(</span><span class="n">findAnc</span><span class="o">(</span><span class="n">a</span><span class="o">)==</span><span class="n">a</span><span class="o">)</span> <span class="n">anc</span><span class="o">[</span><span class="n">a</span><span class="o">]=</span><span class="n">findAnc</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
      <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">findAnc</span><span class="o">(</span><span class="n">b</span><span class="o">)==</span><span class="n">b</span><span class="o">)</span> <span class="n">anc</span><span class="o">[</span><span class="n">b</span><span class="o">]=</span><span class="n">findAnc</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
      <span class="k">else</span> <span class="n">anc</span><span class="o">[</span><span class="n">findAnc</span><span class="o">(</span><span class="n">a</span><span class="o">)]=</span><span class="n">findAnc</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
  
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">findAnc</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">){</span>
    <span class="k">if</span><span class="o">(</span><span class="n">anc</span><span class="o">[</span><span class="n">a</span><span class="o">]==</span><span class="n">a</span><span class="o">)</span> <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
    <span class="n">anc</span><span class="o">[</span><span class="n">a</span><span class="o">]=</span><span class="n">findAnc</span><span class="o">(</span><span class="n">anc</span><span class="o">[</span><span class="n">a</span><span class="o">]);</span>
    <span class="k">return</span> <span class="n">anc</span><span class="o">[</span><span class="n">a</span><span class="o">];</span>
  <span class="o">}</span>
  
  <span class="kd">static</span> <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
  <span class="kd">static</span> <span class="kt">int</span> <span class="n">m</span><span class="o">;</span>
  <span class="kd">static</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">isH</span><span class="o">;</span>
  <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">anc</span><span class="o">;</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span><span class="kd">throws</span> <span class="nc">IOException</span><span class="o">{</span>
    <span class="nc">BufferedReader</span> <span class="n">bf</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileReader</span><span class="o">(</span><span class="s">"milkvisits.in"</span><span class="o">));</span>
    <span class="nc">PrintWriter</span> <span class="n">pr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrintWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileWriter</span><span class="o">(</span><span class="s">"milkvisits.out"</span><span class="o">));</span>
    <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">bf</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="n">n</span><span class="o">=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
    <span class="n">m</span><span class="o">=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
    <span class="nc">String</span> <span class="n">a</span><span class="o">=</span><span class="n">bf</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
    <span class="n">isH</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
    <span class="n">anc</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
      <span class="k">if</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span><span class="n">i</span><span class="o">).</span><span class="na">equals</span><span class="o">(</span><span class="s">"H"</span><span class="o">))</span> <span class="n">isH</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
      <span class="n">anc</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
      <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">bf</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
      <span class="n">connect</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">()),</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">()));</span>
    <span class="o">}</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
      <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">bf</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
      <span class="kt">int</span> <span class="n">b</span><span class="o">=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
      <span class="kt">int</span> <span class="n">c</span><span class="o">=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
      <span class="kt">boolean</span> <span class="n">likeH</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>
      <span class="k">if</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">"H"</span><span class="o">))</span> <span class="n">likeH</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span>
      <span class="k">if</span><span class="o">(</span><span class="n">findAnc</span><span class="o">(</span><span class="n">b</span><span class="o">)!=</span><span class="n">findAnc</span><span class="o">(</span><span class="n">c</span><span class="o">))</span> <span class="n">pr</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
      <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">isH</span><span class="o">[</span><span class="n">findAnc</span><span class="o">(</span><span class="n">b</span><span class="o">)]==</span><span class="n">likeH</span><span class="o">)</span> <span class="n">pr</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
      <span class="k">else</span> <span class="n">pr</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">pr</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

:ET