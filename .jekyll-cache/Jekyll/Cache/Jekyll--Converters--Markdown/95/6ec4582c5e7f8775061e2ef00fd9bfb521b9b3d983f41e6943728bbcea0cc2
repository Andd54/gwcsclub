I"P <h2 id="problem-3-why-did-the-cow-cross-the-road-iii">Problem 3. Why Did the Cow Cross the Road III</h2>

<h3 id="problem-description">Problem Description</h3>

<p>The pasture of John’s farm is circular and there are $2N$ points to get in / out of the pasture. Everyday, $N$ cows will go in and out from different door and every door is only used by one cow once (either in / out). Now, John have collected all the in &amp; out doors of the cows. He wants to know the number pairs that will “cross over”.</p>

<blockquote>
  <p>For instance, if a cow get in from $1$ and get out from $3$ while the other cow get in from $2$ and out of $4$, they will “cross over”.</p>
</blockquote>

<h3 id="proposed-solution">Proposed Solution</h3>

<p>We can use a <a href="https://markyutianchen.gitee.io/react-app-test/#/posts/BinaryIndexTree">Binary Index Tree</a> here to solve the problem.</p>

<p>First, we will construct a Binary Index Tree with length $2N$ and initialized with 0. Then, we will loop on the possible in/out gates. When we have passed through one point, we should do these things:</p>

<ol>
  <li>Check if we have passed through a point that belongs to same breed before
    <ol>
      <li>If yes, update the Binary Index tree to change both current index and the position of previous gate of same breed to 0. Calculate the sum of BIT in range $(\text{previous gate}, \text{current gate})$.</li>
      <li>If not, update the Binary Index tree to change value on current index from 0 to 1.</li>
    </ol>
  </li>
</ol>

<p><img src="USACO-Gold-2017-Feb-3-Mark.assets/image-20201209111059796.png" alt="image-20201209111059796" /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">USACO2017FebGold3</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileReader</span><span class="o">(</span><span class="s">"circlecross.in"</span><span class="o">));</span>
        <span class="nc">PrintWriter</span> <span class="n">pr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrintWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileWriter</span><span class="o">(</span><span class="s">"circlecross.out"</span><span class="o">));</span>

        <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">cowInfo</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span> <span class="o">*</span> <span class="no">N</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">N</span> <span class="o">*</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">++){</span> <span class="n">cowInfo</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span> <span class="o">}</span>

        <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">positionRec</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="no">BIT</span> <span class="n">rec</span> <span class="o">=</span> <span class="k">new</span> <span class="no">BIT</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span> <span class="o">*</span> <span class="no">N</span><span class="o">]);</span>
        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">N</span> <span class="o">*</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">++){</span>
            <span class="kt">int</span> <span class="n">breed</span> <span class="o">=</span> <span class="n">cowInfo</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">positionRec</span><span class="o">.</span><span class="na">keySet</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="n">breed</span><span class="o">)){</span>
                <span class="n">rec</span><span class="o">.</span><span class="na">updatePoint</span><span class="o">(</span><span class="n">positionRec</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">breed</span><span class="o">),</span> <span class="mi">0</span><span class="o">);</span>
                <span class="n">result</span> <span class="o">+=</span> <span class="n">rec</span><span class="o">.</span><span class="na">getSum</span><span class="o">(</span><span class="n">positionRec</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">breed</span><span class="o">),</span> <span class="n">i</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span><span class="o">{</span>
                <span class="n">positionRec</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">breed</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
                <span class="n">rec</span><span class="o">.</span><span class="na">updatePoint</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">pr</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>

        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">pr</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="time-complexity-analysis">Time Complexity Analysis</h3>

<p>Since the update and calculation of range sum on BIT only have a time complexity of $O(\log{n})$ , the over all time complexity will be $O(n\log{n})$.</p>

<p>Since $1\leq n \leq 50000$, this time complexity is acceptable.</p>
:ET