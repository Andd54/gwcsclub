I"£	<h2 id="problem-2-hoof-paper-scissors">Problem 2. Hoof, Paper, Scissors</h2>

<h3 id="problem-summary">Problem Summary</h3>

<p>Hoof Paper Scissors is a game like paper, scissor, stone. In the game, Hoof &gt; Scissors, Scissors &gt; Paper, and Paper &gt; Hoof. The cow Bessie know the sequence of gesture that will be used by Farmer John, but it only can change its gesture for $k$ times, where $k$ is a number that is less than 20.</p>

<p>Given the gesture sequence of farmer John and maximum number of change ($k$) for Bessie, what is the maximum number of games Bessie can win?</p>

<h3 id="proposed-solution">Proposed Solution</h3>

<p>We can use the dynamic programming to solve this problem. First, we noticed that three variables are needed to represent a state for Bessie.</p>

<ol>
  <li>The current gesture Bessie is using</li>
  <li>The number of game Bessie has won</li>
  <li>The number of time that Bessie change its gesture</li>
</ol>

<p>Therefore, we will build up a 3D array $T$ with size $3\times N \times k$, where $N$ is the number of games Bessie and John will have. $T[0][n][k]$ represent the maximum number of game that Bessie can win when it has ‚ÄúHoof‚Äù at $n$th game and has changed its gesture for $k$ times.</p>

<p>Suppose we have a function <code class="language-plaintext highlighter-rouge">isWin(gesture, n)</code> that will return whether Bessie will win. If Bessie wins, return 1; otherwise, return 0. Then we can calculate through the whole table using these equations:</p>

<p>\(\begin{aligned}
T[g][n][k] = \max{\left( T[g][n-1][k]+ isWin(g, n),\;\\
T[(g+1)\%3][n-1][k-1]+ isWin(g, n),\;\\
T[(g + 2)\%3][n-1][k-1]+ isWin(g, n) \right)} 
\end{aligned}\)
If either $n$ or $k$ is out of bound (not in 3D array $T$, return 0.</p>

<p>After calculating through all the table, we should check all the elements in slice $T[][N][]$. (the maximum win number may not require maximum number of change). The final result will be the maximum value of these $3\times k$ values.</p>

<h3 id="time-complexity-analysis">Time Complexity Analysis</h3>

<p>Since we know that $1\leq N\leq 100,000$ and $1\leq k\leq 20$, the 3D array we will construct has a size of $3\times100,000\times20 = 6\times 10^7$. Since we need to calculate through the whole table, our program may require $1\times 10^8$ computational steps and time complexity of $O(kN)$. Since this time complexity is on the edge of TLE, we should use Java to solve this problem.</p>

:ET