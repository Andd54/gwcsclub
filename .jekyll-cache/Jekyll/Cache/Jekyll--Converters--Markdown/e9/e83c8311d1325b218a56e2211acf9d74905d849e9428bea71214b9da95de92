I" <h2 id="题目">题目</h2>

<p>一共有 $n$ 头奶牛，每头奶牛站在不同的位置 $(x, y)$，并拥有一个广播半径为 $p$ 的对讲机（每只奶牛的 $p$ 不一定相同）。求从某只奶牛开始能联系到最多的奶牛数是多少（单向）</p>

<h2 id="思路">思路</h2>

<p>将奶牛坐标装进一个数组中，将每只奶牛的 $p$ 装进另一个 $index$ 都一一对应的数组。遍历装坐标的数组，利用递归计算当前奶牛能联系到的所有奶牛数，并得出最大值</p>

<h2 id="复杂度分析">复杂度分析</h2>

<p>遍历长度为 $n$ 数组的复杂度为 $O(n)$，其中每个元素递归最坏的复杂度也为 $O(n)$，总复杂度为 $O(n^2)$。$n$ 最大为 200，不会超时</p>

<h2 id="代码">代码</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">distance</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">):</span>
	<span class="k">return</span> <span class="p">((</span><span class="n">p2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">p1</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">**</span> <span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="n">p2</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">p1</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span> <span class="o">**</span> <span class="mf">0.5</span>
	
<span class="k">def</span> <span class="nf">neighbors</span><span class="p">(</span><span class="n">pos</span><span class="p">):</span>
	<span class="k">global</span> <span class="n">poses</span><span class="p">,</span> <span class="n">powers</span>
	
	<span class="n">result</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
	<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">poses</span><span class="p">)):</span>
		<span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="n">pos</span><span class="p">:</span> <span class="k">continue</span>
		<span class="k">if</span> <span class="n">distance</span><span class="p">(</span><span class="n">poses</span><span class="p">[</span><span class="n">pos</span><span class="p">],</span> <span class="n">poses</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="n">powers</span><span class="p">[</span><span class="n">pos</span><span class="p">]:</span> <span class="n">result</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">result</span>

<span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="n">pos</span><span class="p">):</span>
	<span class="k">global</span> <span class="n">poses</span><span class="p">,</span> <span class="n">visited</span>
	
	<span class="n">visited</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">pos</span><span class="p">)</span>
	<span class="n">neighbor_pos</span> <span class="o">=</span> <span class="n">neighbors</span><span class="p">(</span><span class="n">pos</span><span class="p">)</span>
	<span class="c1">#print(neighbor_pos)
</span>	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">neighbor_pos</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="k">return</span>
	<span class="k">for</span> <span class="n">neighbor</span> <span class="ow">in</span> <span class="n">neighbor_pos</span><span class="p">:</span>
		<span class="k">if</span> <span class="n">neighbor</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">visited</span><span class="p">:</span> <span class="n">process</span><span class="p">(</span><span class="n">neighbor</span><span class="p">)</span>

<span class="n">lines</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">'moocast.in'</span><span class="p">).</span><span class="n">read</span><span class="p">().</span><span class="n">strip</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
<span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">lines</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">poses</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">powers</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
	<span class="n">line</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">lines</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">' '</span><span class="p">)))</span>
	<span class="n">pos</span> <span class="o">=</span> <span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
	<span class="n">power</span> <span class="o">=</span> <span class="n">line</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
	<span class="n">poses</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">pos</span><span class="p">)</span>
	<span class="n">powers</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">power</span><span class="p">)</span>

<span class="n">max_size</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">poses</span><span class="p">)):</span>
	<span class="n">visited</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
	<span class="n">process</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
	<span class="n">max_size</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">visited</span><span class="p">),</span> <span class="n">max_size</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">max_size</span><span class="p">)</span>
<span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">'moocast.out'</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span>
<span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">max_size</span><span class="p">))</span>
<span class="nb">file</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>
:ET