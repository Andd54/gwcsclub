    public static void mergeSort(ArrayList&lt;Integer&gt; arr, int left, int right){
        if (right &lt;= left){ return; }
        int middle = (left + right) / 2;
        // Recursion Case
        mergeSort(arr, left, middle);
        mergeSort(arr, middle + 1, right);

        //Merge the result of sorted sub-arrays
        int[] leftArr = new int[middle - left];
        int[] rightArr = new int[right - middle - 1];
        for (int i = left; i &lt;= middle; i ++){
            // The Index Here will be tricky
            leftArr[i - left] = arr.get(i);
        }
        for (int i = middle + 1; i &lt;= right; i ++){
            rightArr[i - middle - 1] = arr.get(i);
        }
        int leftArrHead = 0, rightArrHead = 0, originArrHead = left;
        while (leftArrHead &lt; leftArr.length && rightArrHead &lt; rightArr.length){
            if (leftArr[leftArrHead] &lt; rightArr[rightArrHead]){
                arr.set(originArrHead, leftArr[leftArrHead]);
                leftArrHead += 1;
            }
            else{
                arr.set(originArrHead, rightArr[rightArrHead]);
                rightArrHead += 1;
            }
            originArrHead += 1;
        }
        // Deal with the Remaining Elements in Left / Right Array.
        while (leftArrHead &lt; leftArr.length){
            arr.set(originArrHead, leftArr[leftArrHead]);
            leftArrHead += 1; originArrHead += 1;
        }
        while (rightArrHead &lt; rightArr.length){
            arr.set(originArrHead, rightArr[rightArrHead]);
            rightArrHead += 1; originArrHead += 1;
        }
    }